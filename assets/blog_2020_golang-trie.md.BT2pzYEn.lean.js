import{_ as k}from"./chunks/articleMetadata.RAJF6xQ6.js";import{_ as e,C as r,c as E,o as l,j as p,G as d,at as g,a as y,w as c,b as F,e as u}from"./chunks/framework.CAzfEey9.js";import"./chunks/theme.DlMqTukI.js";const o="/assets/20200328174533.BmaM3vx7.png",T=JSON.parse('{"title":"Golang实现简单Trie树","description":"Trie又称字典树，是N叉树的一种特殊形式。是一种存储大量字符串的树形数据结构，相当于`HashMap`，在存储单词中又比`HashMap`节省了很多的内存空间。`trie`树的根节点不存储内容，内容都在孩子节点上。","frontmatter":{"title":"Golang实现简单Trie树","description":"Trie又称字典树，是N叉树的一种特殊形式。是一种存储大量字符串的树形数据结构，相当于`HashMap`，在存储单词中又比`HashMap`节省了很多的内存空间。`trie`树的根节点不存储内容，内容都在孩子节点上。","date":"2020-03-28T11:20:13.000Z","tags":["Golang"]},"headers":[],"relativePath":"blog/2020/golang-trie.md","filePath":"posts/blog/2020/golang-trie/README.md","lastUpdated":1714128292000}'),b={name:"blog/2020/golang-trie.md"};function m(i,s,A,D,C,B){const t=k,h=r("ClientOnly");return l(),E("div",null,[s[0]||(s[0]=p("h1",{id:"golang实现简单trie树",tabindex:"-1"},[y("Golang实现简单Trie树 "),p("a",{class:"header-anchor",href:"#golang实现简单trie树","aria-label":'Permalink to "Golang实现简单Trie树"'},"​")],-1)),d(h,null,{default:c(()=>{var a,n;return[(((a=i.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=i.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(l(),F(t,{key:0,article:i.$frontmatter},null,8,["article"])):u("",!0)]}),_:1}),s[1]||(s[1]=g("",5))])}const v=e(b,[["render",m]]);export{T as __pageData,v as default};
