import{_ as h}from"./chunks/articleMetadata.RAJF6xQ6.js";import{_ as r,C as o,c as k,o as t,j as e,G as d,at as g,a as c,w as b,b as u,e as F}from"./chunks/framework.CAzfEey9.js";import"./chunks/theme.DlMqTukI.js";const D=JSON.parse('{"title":"GoModule添加私有仓库(包会)","description":"本篇记载了如何添加gitlab/github私有仓库到go mod中使用，并且可以使用go get命令获取到私有仓库的依赖。","frontmatter":{"title":"GoModule添加私有仓库(包会)","description":"本篇记载了如何添加gitlab/github私有仓库到go mod中使用，并且可以使用go get命令获取到私有仓库的依赖。","date":"2022-04-17T22:38:34.000Z","tags":["Golang"]},"headers":[],"relativePath":"blog/2022/go-mod-private-repo.md","filePath":"posts/blog/2022/go-mod-private-repo/README.md","lastUpdated":1726155339000}'),m={name:"blog/2022/go-mod-private-repo.md"};function y(a,s,C,B,v,x){const l=h,p=o("ClientOnly");return t(),k("div",null,[s[0]||(s[0]=e("h1",{id:"gomodule添加私有仓库-包会",tabindex:"-1"},[c("GoModule添加私有仓库(包会) "),e("a",{class:"header-anchor",href:"#gomodule添加私有仓库-包会","aria-label":'Permalink to "GoModule添加私有仓库(包会)"'},"​")],-1)),d(p,null,{default:b(()=>{var i,n;return[(((i=a.$frontmatter)==null?void 0:i.aside)??!0)&&(((n=a.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(t(),u(l,{key:0,article:a.$frontmatter},null,8,["article"])):F("",!0)]}),_:1}),s[1]||(s[1]=g(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>GoModule添加私有仓库只需要三步就搞定了👌<br> 1.设置go env😯<br> 2.配置ssh秘钥😅<br> 3.全局替换https请求为ssh请求😆</p></div><h2 id="_1-设置go-env" tabindex="-1">1. 设置go env <a class="header-anchor" href="#_1-设置go-env" aria-label="Permalink to &quot;1. 设置go env&quot;">​</a></h2><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. (设置私有仓库的git地址，这要看你的go.mod中的私有仓库地址)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 比如gitlab的私有仓库是 https://gitlab.xxx.cn，就如下设置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GOPRIVATE=&quot;https://gitlab.xxx.cn&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果是github的私有仓库，比如 https://github.com/company/repo，就如下设置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GOPRIVATE=&quot;https://github.com/company&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. (xxx和上面地址一样，其实执行完1，GONOPROXY和GONOSUMDB会自动设置，可以go env查看)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置请求该地址不需要代理，即GOPROXY</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GONOPROXY=&quot;xxx&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置不验证sum包的签名</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GONOSUMDB=&quot;xxx&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3. (这个设置的前提是你公司的gitlab没有配置https)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 允许设置不安全访问，跳过证书校验，配置后可请求到 http 地址的仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GOINSECURE=&quot;xxx&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="_2-配置ssh秘钥" tabindex="-1">2. 配置ssh秘钥 <a class="header-anchor" href="#_2-配置ssh秘钥" aria-label="Permalink to &quot;2. 配置ssh秘钥&quot;">​</a></h2><p>推荐看一下我写的这篇文章，文章详情请点击：👉 <a href="./../../workflow/git/multi-account">Git 多账户配置</a></p><h2 id="_3-全局替换https请求为ssh请求" tabindex="-1">3. 全局替换https请求为ssh请求 <a class="header-anchor" href="#_3-全局替换https请求为ssh请求" aria-label="Permalink to &quot;3. 全局替换https请求为ssh请求&quot;">​</a></h2><p><code>go mod tidy/download</code> 拉取包时默认都是https请求，所以需要替换为ssh请求，如下：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># gitlab</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> url.&quot;ssh://git@gitlab-company&quot;.insteadOf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://gitlab.xxx.cn&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># github的同理</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> url.&quot;ssh://git@github-company&quot;.insteadOf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>现在已经可以正常拉到私有仓库包了👌</strong></p><h2 id="_4-gitlab额外配置-netrc" tabindex="-1">4. gitlab额外配置.netrc <a class="header-anchor" href="#_4-gitlab额外配置-netrc" aria-label="Permalink to &quot;4. gitlab额外配置.netrc&quot;">​</a></h2><p><em>第四大步骤只需要gitlab私有仓库阅览，github的无需阅读</em></p><p>这一步可以直接省略第 2、3 两个步骤，直接使用 .netrc 文件（文件路径： ~/.netrc ），如下：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">machine</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gitlab.xxx.cn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 用户名</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> password</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 上面设置的秘钥</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用该步骤还可以解决掉一个 <code>gitlab</code> 的一个不能拉取子组库的问题: <a href="https://gitlab.com/gitlab-org/gitlab-foss/-/issues/30785" target="_blank" rel="noreferrer">Go get fails with the usage of subgroups</a>，比如：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如下拉取命令如果不使用步骤4的话就会报错 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 因为由于gitlab的限制，最多只能拉取到一个层级，即 gitlab.xxx.cn/a/b.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gitlab.xxx.cn/a/b/c.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,15))])}const f=r(m,[["render",y]]);export{D as __pageData,f as default};
