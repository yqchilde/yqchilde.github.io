import{_ as i}from"./chunks/articleMetadata.blKJ6eD7.js";import{_ as r,h as p,u as n,B as l,l as a,x as g,ai as _,m,f as s,p as h,q as u}from"./chunks/framework.Cy-Cf61O.js";import"./chunks/theme.DZnwzHNL.js";const f="/assets/20240806101.B6gtpyxx.png",j="/assets/20240806102.MeC-L-ld.png",q="/assets/20240806103.Cb3DLTqW.png",y="/assets/20240806104.DcNAvkLh.png",b="/assets/20240806105.CzGbNZch.png",k="/assets/20240806106.DbaVYfna.png",z="/assets/20240806107.CJu7on4h.png",x="/assets/20240806108.DhqCO4y_.png",C="/assets/20240806109.Cewet1fO.png",M="/assets/20240806110.BprpvsVy.png",v="/assets/20240806111.BzTdLGlM.png",D="/assets/20240806112.CpH0jQxl.png",S="/assets/20240806113.DnoUKVRl.png",w="/assets/20240806114.Dw9gHctu.png",T="/assets/20240806115.Cg5Uekn5.png",V="/assets/20240806116.CrEzRe7Q.png",U=JSON.parse('{"title":"某东M端登录滑块分析学习","description":"","frontmatter":{"title":"某东M端登录滑块分析学习","description":"","date":"2024-08-06T23:42:59.000Z","tags":["逆向爬虫"]},"headers":[],"relativePath":"reverse-crawler/js/jd-m-captcha.md","filePath":"posts/reverse-crawler/js/jd-m-captcha/README.md","lastUpdated":1723099191000}'),A={name:"reverse-crawler/js/jd-m-captcha.md"},E=a("h1",{id:"某东m端登录滑块分析学习",tabindex:"-1"},[g("某东M端登录滑块分析学习 "),a("a",{class:"header-anchor",href:"#某东m端登录滑块分析学习","aria-label":'Permalink to "某东M端登录滑块分析学习"'},"​")],-1),N=_('<p>未完待续...</p><h2 id="某接口" tabindex="-1">某接口 <a class="header-anchor" href="#某接口" aria-label="Permalink to &quot;某接口&quot;">​</a></h2><h3 id="risk-jd-fp-参数" tabindex="-1">risk_jd[fp]参数 <a class="header-anchor" href="#risk-jd-fp-参数" aria-label="Permalink to &quot;risk_jd[fp]参数&quot;">​</a></h3><p>整体搜索一下<code>risk_jd[fp]</code>，搜到几个结果，挨个打开一下，最后定位到了图中所示位置，此时<code>risk_jd[fp]: r.fp</code>，所以要继续看<code>r.fp</code>的值</p><p><img src="'+f+'" alt="img" loading="lazy"></p><p>在上方看到<code>r</code>的值，<code>fp</code>属性在其中，通过<code>r = getJdEid()</code>知道<code>r</code>是怎么来的，断点跟入</p><p><img src="'+j+'" alt="img" loading="lazy"></p><p>跟进来之后看到<code>fp: risk_jd_local_fingerprint</code>，这就知道怎么来的了</p><p><img src="'+q+'" alt="img" loading="lazy"></p><p>搜一下关键词又发现<code>risk_jd_local_fingerprint = t</code>，且<code>t</code>是函数传进来的，那么就跟一下栈</p><p><img src="'+y+'" alt="img" loading="lazy"></p><p>跟进来后看出这个函数参数<code>b</code>就是<code>t</code>，<code>b = this.x64hash128(c.join(&quot;~~~&quot;, 31);</code>，其中<code>c</code>是各种指纹信息</p><p><img src="'+b+'" alt="img" loading="lazy"></p><p>这个<code>x64hash128</code>函数是开源项目 <a href="https://github.com/fingerprintjs/fingerprintjs" target="_blank" rel="noreferrer">fingerprintjs</a> 的方法，本地模拟一下，成功算出</p><p><img src="'+k+'" alt="img" loading="lazy"></p><h3 id="risk-jd-jstub-参数" tabindex="-1">risk_jd[jstub]参数 <a class="header-anchor" href="#risk-jd-jstub-参数" aria-label="Permalink to &quot;risk_jd[jstub]参数&quot;">​</a></h3><p>和<code>risk_jd[fp]</code>一样，找到js中的位置，看出来<code>jstub</code>的值是<code>jd_shadow__</code></p><p><img src="'+z+'" alt="img" loading="lazy"></p><p>在文件中搜一下来源，看出来是一个AES加密算法，扣一下算法</p><p><img src="'+x+'" alt="img" loading="lazy"></p><p>缺啥函数补啥函数，搞定</p><p><img src="'+C+'" alt="img" loading="lazy"></p><h3 id="ct参数" tabindex="-1">ct参数 <a class="header-anchor" href="#ct参数" aria-label="Permalink to &quot;ct参数&quot;">​</a></h3><p>滑块中显示的图片是<code>ct</code>参数</p><p><img src="'+M+'" alt="img" loading="lazy"></p><p>跟一下调用栈</p><p><img src="'+v+'" alt="img" loading="lazy"></p><p>进入js中，搜一下<code>ct =</code>，定位到如图位置<br> 所以<code>ct</code>就是用<code>pt(o.RfeFa(vt, m) + o.FSiZM(gt, y.si[e(&quot;0x4c&quot;) + &quot;gth&quot;], 4) + y.si + d + c, l, v)</code>计算的</p><p><img src="'+D+'" alt="img" loading="lazy"></p><p>从后往前分别找一下参数，先看参数<code>v</code>，搜一下<code>v</code>的值，发现<code>l</code>和<code>v</code>都在<code>requireCaptcha.js</code>这个文件中</p><p><img src="'+S+'" alt="img" loading="lazy"></p><p><code>c</code>的值是时间戳，Date.parse(new Date)<br><code>d</code>的值看起来是一些手机号，wgl等环境参数<br><code>y.si</code>是前文<code>jcapsid</code>接口中的<code>jcap_sid</code></p><p><img src="'+w+'" alt="img" loading="lazy"></p><p>接着看<code>o.FSiZM(gt, y.si[e(&quot;0x4c&quot;) + &quot;gth&quot;], 4)</code></p><ol><li>其中<code>FSiZM</code>函数接收3个参数，其内部实现是<code>t(e, n)</code>，也就是可以变成<code>o.FSiZM(gt(y.si[e(&quot;0x4c&quot;) + &quot;gth&quot;], 4))</code></li><li><code>e(&quot;0x4c&quot;) + &quot;gth&quot;</code>，执行得出<code>length</code>，所以又可以变成<code>o.FSiZM(gt(y.si[&quot;length&quot;], 4))</code></li><li>那么<code>gt</code>函数是啥？</li></ol><p><img src="'+T+'" alt="img" loading="lazy"></p><p><img src="'+V+'" alt="img" loading="lazy"></p>',37);function P(e,B,Z,$,F,R){const c=i,d=m("ClientOnly");return s(),p("div",null,[E,n(d,null,{default:l(()=>{var t,o;return[(((t=e.$frontmatter)==null?void 0:t.aside)??!0)&&(((o=e.$frontmatter)==null?void 0:o.showArticleMetadata)??!0)?(s(),h(c,{key:0,article:e.$frontmatter},null,8,["article"])):u("",!0)]}),_:1}),N])}const G=r(A,[["render",P]]);export{U as __pageData,G as default};
