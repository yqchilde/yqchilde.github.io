import{_ as o}from"./chunks/articleMetadata.-WFpoTxv.js";import{_ as r,C as c,c as p,o as s,j as n,G as u,az as m,a as b,w as h,b as g,e as f}from"./chunks/framework.B5MS1KJz.js";import"./chunks/theme.CnTPM46A.js";const x="/assets/git-flow.CiY4PBAW.png",T=JSON.parse('{"title":"编程规范","description":"","frontmatter":{"sort":1,"title":"编程规范","needRoute":true,"showArticleMetadata":false,"showChapterCount":false},"headers":[],"relativePath":"workflow/style-guide.md","filePath":"posts/workflow/style-guide/index.md","lastUpdated":1714018789000}'),y={name:"workflow/style-guide.md"};function _(t,e,v,k,C,w){const d=o,i=c("ClientOnly");return s(),p("div",null,[e[0]||(e[0]=n("h1",{id:"编程规范",tabindex:"-1"},[b("编程规范 "),n("a",{class:"header-anchor",href:"#编程规范","aria-label":'Permalink to "编程规范"'},"​")],-1)),u(i,null,{default:h(()=>{var a,l;return[(((a=t.$frontmatter)==null?void 0:a.aside)??!0)&&(((l=t.$frontmatter)==null?void 0:l.showArticleMetadata)??!0)?(s(),g(d,{key:0,article:t.$frontmatter},null,8,["article"])):f("",!0)]}),_:1}),e[1]||(e[1]=m('<h2 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-label="Permalink to &quot;命名规范&quot;">​</a></h2><p>命名规范是编程范式中最重要的一部分，他直接影响到代码的可读性和可维护性</p><div class="important custom-block github-alert"><p class="custom-block-title">常见的命名形式</p><p></p><ul><li><code>camelCase</code> 小驼峰命名法</li><li><code>PascalCase</code> 大驼峰式命名法（首字母大写）</li><li><code>snake_case</code> 下划线命名法</li><li><code>kebab-case</code> 短横线命名法</li><li><code>UPPER_CASE</code> 大写命名法</li></ul></div><h2 id="git规范" tabindex="-1">Git规范 <a class="header-anchor" href="#git规范" aria-label="Permalink to &quot;Git规范&quot;">​</a></h2><h3 id="分支管理和命名规范" tabindex="-1">分支管理和命名规范 <a class="header-anchor" href="#分支管理和命名规范" aria-label="Permalink to &quot;分支管理和命名规范&quot;">​</a></h3><p>如下图所示，是Git分支管理规范</p><p><img src="'+x+`" alt="git-flow" loading="lazy"></p><ul><li><code>master / main</code> 主分支 <ul><li>用于存放对外发布的稳定版本（不能直接在该分支上开发，只能从 <code>develop</code> 分支合并过来）</li></ul></li><li><code>develop</code> 开发分支 <ul><li>用于存放最新的开发版本（所有新功能都以该分支来创建自己的开发分支，该分支只做合并操作，不能直接在该分支上开发）</li></ul></li><li><code>feature</code> 功能分支 <ul><li>用于开发新功能（在 <code>develop</code> 上创建分支，以自己开发功能模块命名，功能测试正常后合并到 <code>develop</code> 分支）</li><li><code>feature</code> 分支推荐命名规范：<code>feature/日期-开发者-功能模块</code></li></ul></li><li><code>hotfix</code> 紧急 bug 修复分支 <ul><li>用于修复线上版本的 bug（在 <code>master</code> 分支上创建，修复完成后合并到 <code>master</code>）</li><li><code>hotfix</code> 分支推荐命名规范：<code>hotfix/日期-开发者-修复内容</code></li></ul></li><li><code>release</code> 预发布分支 <ul><li>用于当需要为发布新版做准备时（在 <code>develop</code> 上创建分支，以版本号命名，测试完成后合并到 <code>master</code> 和 <code>develop</code>）</li><li><code>release</code> 分支推荐命名规范：<code>release/版本号</code></li></ul></li></ul><p>在日常开发中，通常使用可视化工具 <code>sourcetree</code> 进行版本管理</p><h3 id="commit提交规范" tabindex="-1">commit提交规范 <a class="header-anchor" href="#commit提交规范" aria-label="Permalink to &quot;commit提交规范&quot;">​</a></h3><p>git commit message的格式</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span>&lt;footer&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>type</code> 类型</li><li><code>scope</code> commit的影响范围</li><li><code>subject</code> commit的描述</li><li><code>body</code> commit的详细描述</li><li><code>footer</code> 关联issue</li></ul><p>举例子：</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>feat(auth): add user authentication feature</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- Implemented user login and registration</span></span>
<span class="line"><span>- Added JWT token for authentication</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Fixes #123</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><table tabindex="0"><thead><tr><th style="text-align:center;">type</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:center;">feat</td><td>新功能</td></tr><tr><td style="text-align:center;">fix</td><td>修复 bug</td></tr><tr><td style="text-align:center;">docs</td><td>文档类改动</td></tr><tr><td style="text-align:center;">style</td><td>代码格式改动，或其他样式改动</td></tr><tr><td style="text-align:center;">refactor</td><td>重构（既不是新增功能，也不是修复bug）</td></tr><tr><td style="text-align:center;">perf</td><td>性能优化相关</td></tr><tr><td style="text-align:center;">test</td><td>单元测试</td></tr><tr><td style="text-align:center;">build</td><td>构建工具或者依赖项的改动</td></tr><tr><td style="text-align:center;">ci</td><td>修改项目持续集成流程</td></tr><tr><td style="text-align:center;">chore</td><td>其他类型的提交</td></tr><tr><td style="text-align:center;">revert</td><td>恢复或还原相关提交</td></tr><tr><td style="text-align:center;">wip | draft</td><td>托管平台对应的草稿标识</td></tr></tbody></table>`,16))])}const N=r(y,[["render",_]]);export{T as __pageData,N as default};
