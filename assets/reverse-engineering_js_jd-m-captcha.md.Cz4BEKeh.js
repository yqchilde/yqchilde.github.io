import{_ as h}from"./chunks/articleMetadata.RAJF6xQ6.js";import{_ as k,C as r,c as o,o as n,j as p,G as d,at as E,a as g,w as c,b as y,e as F}from"./chunks/framework.CAzfEey9.js";import"./chunks/theme.DlMqTukI.js";const u="/assets/20240806100.B8CGvM8o.png",m="/assets/20240806100.1.CAWGgEdb.png",q="/assets/20240806100.2.BXftV597.png",_="/assets/20240806100.3.DlWMDwYb.png",b="/assets/20240806100.4.3qInZi9r.png",C="/assets/20240806100.5.BR0rySFt.png",B="/assets/20240806101.B6gtpyxx.png",f="/assets/20240806102.MeC-L-ld.png",j="/assets/20240806103.Cb3DLTqW.png",A="/assets/20240806104.DcNAvkLh.png",D="/assets/20240806105.CzGbNZch.png",v="/assets/20240806106.DbaVYfna.png",z="/assets/20240806107.CJu7on4h.png",x="/assets/20240806108.DhqCO4y_.png",M="/assets/20240806109.Cewet1fO.png",S="/assets/20240806110.BprpvsVy.png",w="/assets/20240806111.BzTdLGlM.png",P="/assets/20240806112.CpH0jQxl.png",R="/assets/20240806113.DnoUKVRl.png",N="/assets/20240806114.Dw9gHctu.png",T="/assets/20240806115.DgAcAZrc.png",V="/assets/20240806116.B3GlYFNj.png",Z="/assets/20240806117.19dpFtKk.png",G="/assets/20240806118.CoubRcwm.png",U=JSON.parse('{"title":"某东M端登录滑块分析学习","description":"","frontmatter":{"sort":1,"title":"某东M端登录滑块分析学习","description":"","date":"2024-08-06T23:42:59.000Z","tags":["逆向笔记"]},"headers":[],"relativePath":"reverse-engineering/js/jd-m-captcha.md","filePath":"posts/reverse-engineering/js/jd-m-captcha/README.md","lastUpdated":1724046582000}'),$={name:"reverse-engineering/js/jd-m-captcha.md"};function O(i,s,W,L,H,I){const l=h,e=r("ClientOnly");return n(),o("div",null,[s[0]||(s[0]=p("h1",{id:"某东m端登录滑块分析学习",tabindex:"-1"},[g("某东M端登录滑块分析学习 "),p("a",{class:"header-anchor",href:"#某东m端登录滑块分析学习","aria-label":'Permalink to "某东M端登录滑块分析学习"'},"​")],-1)),d(e,null,{default:c(()=>{var a,t;return[(((a=i.$frontmatter)==null?void 0:a.aside)??!0)&&(((t=i.$frontmatter)==null?void 0:t.showArticleMetadata)??!0)?(n(),y(l,{key:0,article:i.$frontmatter},null,8,["article"])):F("",!0)]}),_:1}),s[1]||(s[1]=E('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>本分类中所有文章仅代表博主个人学习分享，不用于其他任何目的，不提供完整代码，只做学习笔记，抓包内容、敏感网址、数据接口已进行脱敏处理，如有侵权，请联系博主删除。</strong></p></div><h2 id="分析目标" tabindex="-1">分析目标 <a class="header-anchor" href="#分析目标" aria-label="Permalink to &quot;分析目标&quot;">​</a></h2><p>目标：某东M端登录滑块<br> 网址：aHR0cHM6Ly9wbG9naW4ubS5qZC5jb20vbG9naW4vbG9naW4=</p><h2 id="抓包分析" tabindex="-1">抓包分析 <a class="header-anchor" href="#抓包分析" aria-label="Permalink to &quot;抓包分析&quot;">​</a></h2><p>进入之后先清理网站数据再刷新，输入手机号，点击获取验证码，到此开始从后往前分析包</p><p><img src="'+u+'" alt="img" loading="lazy"></p><p><img src="'+m+'" alt="img" loading="lazy"></p><p><img src="'+q+'" alt="img" loading="lazy"></p><p><img src="'+_+'" alt="img" loading="lazy"></p><p><strong>check</strong> 接口是获取滑块验证码图片的，也是提交滑块数据的，响应<code>img</code>值里是图片数据，如果提交滑块数据错误会报错</p><p><img src="'+b+'" alt="img" loading="lazy"></p><p><strong>fp</strong> 接口里需要知道<code>si</code>（jcapsid接口返回的（jcap_sid））、<code>ct</code>怎么来的，看起来是一些指纹信息</p><p><img src="'+C+'" alt="img" loading="lazy"></p><p><strong>jcapsid</strong> 接口需要知道以下参数计算</p><ul><li><strong>st</strong>: 搜了下在<code>new_login_entrance</code>的响应里</li><li><strong>risk_jd[fp]</strong>: <strong>需要计算</strong></li><li><strong>risk_jd[token]</strong>: 搜了下在<code>m.html</code>里</li><li><strong>risk_jd[jstub]</strong>: <strong>需要计算</strong></li><li><strong>risk_jd[fpstep]</strong>: nb + 时间戳</li></ul><h2 id="逆向分析" tabindex="-1">逆向分析 <a class="header-anchor" href="#逆向分析" aria-label="Permalink to &quot;逆向分析&quot;">​</a></h2><p>所以一共需要分析出以下参数</p><ol><li><em>jcapsid</em> 接口 <strong>risk_jd[fp]、risk_jd[jstub]</strong></li><li><em>fp</em> 接口 <strong>ct</strong></li><li><em>check</em> 接口 <strong>tk、ct</strong></li></ol><h3 id="_1-jcapsid-risk-jd-fp" tabindex="-1">1.jcapsid - risk_jd[fp] <a class="header-anchor" href="#_1-jcapsid-risk-jd-fp" aria-label="Permalink to &quot;1.jcapsid - risk_jd[fp]&quot;">​</a></h3><p>整体搜索一下<code>risk_jd[fp]</code>，搜到几个结果，挨个打开一下，最后定位到了图中所示位置，此时<code>risk_jd[fp]: r.fp</code>，所以要继续看<code>r.fp</code>的值</p><p><img src="'+B+'" alt="img" loading="lazy"></p><p>在上方看到<code>r</code>的值，<code>fp</code>属性在其中，通过<code>r = getJdEid()</code>知道<code>r</code>是怎么来的，断点跟入</p><p><img src="'+f+'" alt="img" loading="lazy"></p><p>跟进来之后看到<code>fp: risk_jd_local_fingerprint</code>，这就知道怎么来的了</p><p><img src="'+j+'" alt="img" loading="lazy"></p><p>搜一下关键词又发现<code>risk_jd_local_fingerprint = t</code>，且<code>t</code>是函数传进来的，那么就跟一下栈</p><p><img src="'+A+'" alt="img" loading="lazy"></p><p>跟进来后看出这个函数参数<code>b</code>就是<code>t</code>，<code>b = this.x64hash128(c.join(&quot;~~~&quot;, 31);</code>，其中<code>c</code>是各种指纹信息</p><p><img src="'+D+'" alt="img" loading="lazy"></p><p>这个<code>x64hash128</code>函数是开源项目 <a href="https://github.com/fingerprintjs/fingerprintjs" target="_blank" rel="noreferrer">fingerprintjs</a> 的方法，本地模拟一下，成功算出</p><p><img src="'+v+'" alt="img" loading="lazy"></p><h3 id="_2-jcapsid-risk-jd-jstub" tabindex="-1">2.jcapsid - risk_jd[jstub] <a class="header-anchor" href="#_2-jcapsid-risk-jd-jstub" aria-label="Permalink to &quot;2.jcapsid - risk_jd[jstub]&quot;">​</a></h3><p>和<code>risk_jd[fp]</code>一样，找到js中的位置，看出来<code>jstub</code>的值是<code>jd_shadow__</code></p><p><img src="'+z+'" alt="img" loading="lazy"></p><p>在文件中搜一下来源，看出来是一个AES加密算法，扣一下算法</p><p><img src="'+x+'" alt="img" loading="lazy"></p><p>缺啥函数补啥函数，搞定</p><p><img src="'+M+'" alt="img" loading="lazy"></p><h3 id="_3-fp-ct" tabindex="-1">3.fp - ct <a class="header-anchor" href="#_3-fp-ct" aria-label="Permalink to &quot;3.fp - ct&quot;">​</a></h3><p>滑块中显示的图片是<code>ct</code>参数</p><p><img src="'+S+'" alt="img" loading="lazy"></p><p>跟一下调用栈</p><p><img src="'+w+'" alt="img" loading="lazy"></p><p>进入js中，搜一下<code>ct =</code>，定位到如图位置<br> 所以<code>ct</code>就是用<code>pt(o.RfeFa(vt, m) + o.FSiZM(gt, y.si[e(&quot;0x4c&quot;) + &quot;gth&quot;], 4) + y.si + d + c, l, v)</code>计算的</p><p><img src="'+P+'" alt="img" loading="lazy"></p><p>从后往前分别找一下参数，先看参数<code>v</code>，搜一下<code>v</code>的值，发现<code>l</code>和<code>v</code>都在<code>requireCaptcha.js</code>这个文件中</p><p><img src="'+R+'" alt="img" loading="lazy"></p><p><code>c</code>的值是时间戳，Date.parse(new Date)<br><code>d</code>的值看起来是一些手机号，wgl等环境参数<br><code>y.si</code>是前文<code>jcapsid</code>接口中的<code>jcap_sid</code></p><p><img src="'+N+`" alt="img" loading="lazy"></p><p>接着看<code>o.FSiZM(gt, y.si[e(&quot;0x4c&quot;) + &quot;gth&quot;], 4)</code></p><ol><li>其中<code>FSiZM</code>函数接收3个参数，其内部实现是<code>t(e, n)</code>，也就是可以变成<code>o.FSiZM(gt(y.si[e(&quot;0x4c&quot;) + &quot;gth&quot;], 4))</code></li><li><code>e(&quot;0x4c&quot;) + &quot;gth&quot;</code>，执行得出<code>length</code>，所以又可以变成<code>o.FSiZM(gt(y.si[&quot;length&quot;], 4))</code></li><li>那么<code>gt</code>函数是啥？扣一下</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e;) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        o</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>再往前是<code>o.RfeFa(vt, m)</code>，搜一下m是什么，<code>m=时间戳%19</code></p><p><img src="`+T+'" alt="img" loading="lazy"></p><p><img src="'+V+`" alt="img" loading="lazy"></p><p><code>vt</code>函数也同理，扣一下算法</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">322</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        kuqKR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;6&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;7&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;9&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;e&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;f&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;h&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;i&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;j&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;k&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;l&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;o&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;p&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;q&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;r&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;u&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;v&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;w&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;y&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; n.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kuqKR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, t); i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r[Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">35</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>o.RfeFa</code>和<code>FSiZM</code>一样，等于vt(m)</p><p>最后只差<code>pt</code>方法了，跟个断点走进去。return 后面跟着一个三元表达式，两个结果分别查看一下</p><p><img src="`+Z+'" alt="img" loading="lazy"></p><p>根据结果断定是前一种，拆开第一种发现，前面是一个<code>JSON.stringify()</code>，后面是一个加密函数</p><p><img src="'+G+'" alt="img" loading="lazy"></p><p>继续跟进去加密函数，未完待续...</p><h3 id="_4-check-tk、ct" tabindex="-1">4.check - tk、ct <a class="header-anchor" href="#_4-check-tk、ct" aria-label="Permalink to &quot;4.check - tk、ct&quot;">​</a></h3>',64))])}const Q=k($,[["render",O]]);export{U as __pageData,Q as default};
